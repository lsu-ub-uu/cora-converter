/*
 * Copyright 2019, 2021, 2022 Uppsala University Library
 *
 * This file is part of Cora.
 *
 *     Cora is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Cora is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Cora.  If not, see <http://www.gnu.org/licenses/>.
 */

package se.uu.ub.cora.converter;

/**
 * ConverterFactory is intended to be implemented in implementation modules and is used by
 * {@link ConverterProvider} to give access to instances of the implemented Converter. The
 * implementation modules can have one or more implementing ConverterFactories. The found factories
 * are distinguished by the name, which is unique, returned by the getName method.
 * <p>
 * If any problems arise during initialization of the factory MUST a
 * {@link ConverterInitializationException} be thrown.
 * 
 * @see ConverterProvider
 */
public interface ConverterFactory {
	/**
	 * Returns a new ExternallyConvertableToStringConverter instance generated by this
	 * ConverterFactory.
	 * <p>
	 * If any problems arise during factorisation of the instance MUST a
	 * {@link ConverterInitializationException} be thrown.
	 * 
	 * @return a newly factored converter instance
	 */
	ExternallyConvertibleToStringConverter factorExternallyConvertableToStringConverter();

	/**
	 * Returns a new StringToExternallyConvertableConverter instance generated by this
	 * ConverterFactory.
	 * <p>
	 * If any problems arise during factorisation of the instance MUST a
	 * {@link ConverterInitializationException} be thrown.
	 * 
	 * @return a newly factored converter instance
	 */
	StringToExternallyConvertibleConverter factorStringToExternallyConvertableConverter();

	/**
	 * Returns a unique string name used to identify the Converters this factory factories, in such
	 * a way that the developer can choose the desired Converter to get access to.
	 * 
	 * @return name for the converters this factory factors
	 */
	String getName();

}
